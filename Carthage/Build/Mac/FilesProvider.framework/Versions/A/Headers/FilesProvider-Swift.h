// Generated by Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FilesProvider",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSXMLParser;

/// Simple wrapper around <code>Foundation.XMLParser</code>.
SWIFT_CLASS("_TtC13FilesProvider11AEXMLParser")
@interface AEXMLParser : NSObject <NSXMLParserDelegate>
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSURLSession;
@class FileProviderStreamTask;
@class NSInputStream;
@class NSOutputStream;

SWIFT_PROTOCOL("_TtP13FilesProvider17FPSStreamDelegate_")
@protocol FPSStreamDelegate <NSURLSessionTaskDelegate>
@optional
/// Indiciates that the read side of a connection has been closed.  Any
/// outstanding reads complete, but future reads will immediately fail.
/// This may be sent even when no reads are in progress. However, when
/// this delegate message is received, there may still be bytes
/// available.  You only know that no more bytes are available when you
/// are able to read until EOF.
- (void)urlSession:(NSURLSession * _Nonnull)session readClosedFor:(FileProviderStreamTask * _Nonnull)streamTask;
/// Indiciates that the write side of a connection has been closed.
/// Any outstanding writes complete, but future writes will immediately
/// fail.
- (void)urlSession:(NSURLSession * _Nonnull)session writeClosedFor:(FileProviderStreamTask * _Nonnull)streamTask;
/// A notification that the system has determined that a better route
/// to the host has been detected (eg, a wi-fi interface becoming
/// available.)  This is a hint to the delegate that it may be
/// desirable to create a new task for subsequent work.  Note that
/// there is no guarantee that the future task will be able to connect
/// to the host, so callers should should be prepared for failure of
/// reads and writes over any new interface.
- (void)urlSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredFor:(FileProviderStreamTask * _Nonnull)streamTask;
/// The given task has been completed, and unopened NSInputStream and
/// NSOutputStream objects are created from the underlying network
/// connection.  This will only be invoked after all enqueued IO has
/// completed (including any necessary handshakes.)  The streamTask
/// will not receive any further delegate messages.
- (void)urlSession:(NSURLSession * _Nonnull)session streamTask:(FileProviderStreamTask * _Nonnull)streamTask didBecome:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
@end

@class NSStream;

/// This class is a replica of NSURLSessionStreamTask with same api for iOS 7/8
/// while it can actually fallback to NSURLSessionStreamTask in iOS 9.
SWIFT_CLASS("_TtC13FilesProvider22FileProviderStreamTask")
@interface FileProviderStreamTask : NSURLSessionTask <NSStreamDelegate>
/// An identifier uniquely identifies the task within a given session.
/// This value is unique only within the context of a single session;
/// tasks in other sessions may have the same <code>taskIdentifier</code> value.
@property (nonatomic, readonly) NSUInteger taskIdentifier;
/// An app-provided description of the current task.
/// This value may be nil. It is intended to contain human-readable strings that you can
/// then display to the user as part of your app’s user interface.
@property (nonatomic, copy) NSString * _Nullable taskDescription;
/// The current state of the task—active, suspended, in the process
/// of being canceled, or completed.
@property (nonatomic, readonly) NSURLSessionTaskState state;
/// The original request object passed when the task was created.
/// This value is typically the same as the currently active request (<code>currentRequest</code>)
/// except when the server has responded to the initial request with a redirect to a different URL.
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable originalRequest;
/// The URL request object currently being handled by the task.
/// This value is typically the same as the initial request (<code>originalRequest</code>)
/// except when the server has responded to the initial request with a redirect to a different URL.
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable currentRequest;
/// The number of bytes that the task has sent to the server in the request body.
/// This byte count includes only the length of the request body itself, not the request headers.
/// To be notified when this value changes, implement the
/// <code>urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)</code> delegate method.
@property (nonatomic, readonly) int64_t countOfBytesSent;
/// The number of bytes that the task has received from the server in the response body.
/// To be notified when this value changes, implement the <code>urlSession(_:dataTask:didReceive:)</code> delegate method (for data and upload tasks)
/// or the <code>urlSession(_:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:)</code> method (for download tasks).
@property (nonatomic, readonly) int64_t countOfBytesReceived;
/// The number of bytes that the task expects to send in the request body.
/// The <code>URL</code> loading system can determine the length of the upload data in three ways:
/// <ul>
///   <li>
///     From the length of the <code>NSData</code> object provided as the upload body.
///   </li>
///   <li>
///     From the length of the file on disk provided as the upload body of an upload task (not a download task).
///   </li>
///   <li>
///     From the <code>Content-Length</code> in the request object, if you explicitly set it.
///   </li>
/// </ul>
/// Otherwise, the value is <code>NSURLSessionTransferSizeUnknown</code> (<code>-1</code>) if you provided a stream or body data object, or zero (<code>0</code>) if you did not.
@property (nonatomic, readonly) int64_t countOfBytesExpectedToSend;
/// The number of bytes that the task expects to receive in the response body.
/// This value is determined based on the <code>Content-Length</code> header received from the server.
/// If that header is absent, the value is <code>NSURLSessionTransferSizeUnknown</code>.
@property (nonatomic, readonly) int64_t countOfBytesExpectedToReceive;
- (void)addObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath options:(NSKeyValueObservingOptions)options context:(void * _Nullable)context;
- (void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath;
- (void)removeObserver:(NSObject * _Nonnull)observer forKeyPath:(NSString * _Nonnull)keyPath context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Cancels the task.
/// This method returns immediately, marking the task as being canceled. Once a task is marked as being canceled,
/// <code>urlSession(_:task:didCompleteWithError:)</code> will be sent to the task delegate, passing an error
/// in the domain NSURLErrorDomain with the code <code>NSURLErrorCancelled</code>. A task may, under some circumstances,
/// send messages to its delegate before the cancelation is acknowledged.
/// This method may be called on a task that is suspended.
- (void)cancel;
/// An error object that indicates why the task failed.
/// This value is <code>NULL</code> if the task is still active or if the transfer completed successfully.
@property (nonatomic, readonly) NSError * _Nullable error;
/// Temporarily suspends a task.
/// A task, while suspended, produces no network traffic and is not subject to timeouts.
/// A download task can continue transferring data at a later time.
/// All other tasks must start over when resumed.
- (void)suspend;
- (void)resume;
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
@end

@class NSFileManager;

SWIFT_CLASS("_TtC13FilesProvider32LocalFileProviderManagerDelegate")
@interface LocalFileProviderManagerDelegate : NSObject <NSFileManagerDelegate>
- (BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldCopyItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL SWIFT_WARN_UNUSED_RESULT;
- (BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldMoveItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL SWIFT_WARN_UNUSED_RESULT;
- (BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldRemoveItemAtURL:(NSURL * _Nonnull)URL SWIFT_WARN_UNUSED_RESULT;
- (BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldLinkItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL SWIFT_WARN_UNUSED_RESULT;
- (BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error copyingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL SWIFT_WARN_UNUSED_RESULT;
- (BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error movingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL SWIFT_WARN_UNUSED_RESULT;
- (BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error removingItemAtURL:(NSURL * _Nonnull)URL SWIFT_WARN_UNUSED_RESULT;
- (BOOL)fileManager:(NSFileManager * _Nonnull)fileManager shouldProceedAfterError:(NSError * _Nonnull)error linkingItemAtURL:(NSURL * _Nonnull)srcURL toURL:(NSURL * _Nonnull)dstURL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC13FilesProvider9SMBClient")
@interface SMBClient : NSObject <NSStreamDelegate>
@property (nonatomic) NSTimeInterval timeout;
@property (nonatomic, readonly) uint64_t messageId;
@property (nonatomic, readonly) uint16_t credit;
@property (nonatomic, readonly) uint64_t sessionId;
- (nonnull instancetype)initWithHost:(NSString * _Nonnull)host port:(NSInteger)port OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSData * _Nonnull currentHandlingData;
@property (nonatomic) NSInteger expectedBytes;
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





@class NSURLSessionDownloadTask;
@class NSURLSessionDataTask;
@class NSURLResponse;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

/// All objects set to <code>FileProviderRemote.session</code> must be an instance of this class
SWIFT_CLASS("_TtC13FilesProvider15SessionDelegate")
@interface SessionDelegate : NSObject <NSURLSessionDataDelegate, NSURLSessionDownloadDelegate, NSURLSessionStreamDelegate>
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC13FilesProvider7UndoBox")
@interface UndoBox : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
